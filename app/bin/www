#!/usr/bin/env node

/**
 * Module dependencies.
 */

var debug = require('debug')('dl:server');
var http = require('http');

var appPath = process.argv[2];
var appPort = process.argv[3] || process.env.PORT || '3000';

runServer(appPath, appPort);

function runServer(appPath, port) {

    var app = require(appPath);

    port = normalizePort(port);
    app.set('port', port);

    var server = http.createServer(app);

    server.listen(port);
    server.on('error', getErrorHendler(port));
    server.on('listening', getListeningHandler(server));

    console.log('Started app \'' + appPath + '\' on port ' + port);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function getErrorHendler(port) {
    return function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        var bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    };
}
/**
 * Event listener for HTTP server "listening" event.
 */
function getListeningHandler(server) {
    return function onListening() {
        var addr = server.address();
        var bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        debug('Listening on ' + bind);
    };
}